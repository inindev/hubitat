From 8679c7b3d87fc697d45b2e026cf0e65c9350aa3e Mon Sep 17 00:00:00 2001
From: John Clark <inindev@gmail.com>
Date: Mon, 21 Dec 2020 19:10:51 -0500
Subject: [PATCH]  Reboot of Eric Maycock's Tasmota-Hubitat integration for
 Tasmota 9.2.0   see: github.com/erocm123/Sonoff-Tasmota

---
 tasmota/i18n.h                |   5 +
 tasmota/language/en_GB.h      |   5 +
 tasmota/my_user_config.h      |   4 +
 tasmota/settings.h            |   9 +-
 tasmota/settings.ino          |   4 +
 tasmota/xdrv_01_webserver.ino |   4 +
 tasmota/xdrv_02_mqtt.ino      |   3 +
 tasmota/xdrv_88_hubitat.ino   | 187 ++++++++++++++++++++++++++++++++++
 8 files changed, 219 insertions(+), 2 deletions(-)
 create mode 100644 tasmota/xdrv_88_hubitat.ino

diff --git a/tasmota/i18n.h b/tasmota/i18n.h
index b84ce426..aef2199c 100644
--- a/tasmota/i18n.h
+++ b/tasmota/i18n.h
@@ -647,6 +647,10 @@
 #define D_CMND_PING "Ping"
 #define D_JSON_PING "Ping"
 
+// Commands xdrv_88_hubitat.ino
+#define D_CMND_HUBITATHOST "HubitatHost"
+#define D_CMND_HUBITATPORT "HubitatPort"
+
 // Commands xsns_02_analog.ino
 #define D_CMND_ADCPARAM "AdcParam"
 
@@ -679,6 +683,7 @@
 #define D_LOG_LOG "LOG: "          // Logging
 #define D_LOG_MODULE "MOD: "       // Module
 #define D_LOG_MDNS "DNS: "         // mDNS
+#define D_LOG_HUBITAT "HUB: "      // Hubitat
 #define D_LOG_MQTT "MQT: "         // MQTT
 #define D_LOG_OTHER "OTH: "        // Other
 #define D_LOG_RESULT "RSL: "       // Result
diff --git a/tasmota/language/en_GB.h b/tasmota/language/en_GB.h
index 90cf9090..d8d7a394 100644
--- a/tasmota/language/en_GB.h
+++ b/tasmota/language/en_GB.h
@@ -478,6 +478,11 @@
 #define D_DEVICE_INPUT "Input"
 #define D_DEVICE_OUTPUT "Output"
 
+// xdrv_88_hubitat.ino
+#define D_CONFIGURE_HUBITAT "Configure Hubitat"
+#define D_HUBITAT_PARAMETERS "Hubitat parameters"
+#define D_HUBITAT_ENABLE "Hubitat enable"
+
 // xsns_05_ds18b20.ino
 #define D_SENSOR_BUSY "Sensor busy"
 #define D_SENSOR_CRC_ERROR "Sensor CRC error"
diff --git a/tasmota/my_user_config.h b/tasmota/my_user_config.h
index c698a114..0a23d1b2 100644
--- a/tasmota/my_user_config.h
+++ b/tasmota/my_user_config.h
@@ -98,6 +98,10 @@
 #define OTA_URL                "http://ota.tasmota.com/tasmota32/release/tasmota32.bin"  // [OtaUrl]
 #endif  // ESP32
 
+// -- Hubitat -------------------------------------
+#define HUBITAT_HOST           ""                // [HubitatHost]
+#define HUBITAT_PORT           39501             // [HubitatPort]
+
 // -- MQTT ----------------------------------------
 #define MQTT_USE               true              // [SetOption3] Select default MQTT use (false = Off, true = On)
 
diff --git a/tasmota/settings.h b/tasmota/settings.h
index 72d0477c..167c3180 100644
--- a/tasmota/settings.h
+++ b/tasmota/settings.h
@@ -147,7 +147,7 @@ typedef union {                            // Restricted by MISRA-C Rule 18.4 bu
     uint32_t spare05 : 1;                  // bit 5
     uint32_t spare06 : 1;                  // bit 6
     uint32_t spare07 : 1;                  // bit 7
-    uint32_t spare08 : 1;                  // bit 8
+    uint32_t hubitat_enabled : 1;          // bit 8 (v9.1.0.0)
     uint32_t spare09 : 1;                  // bit 9
     uint32_t spare10 : 1;                  // bit 10
     uint32_t spare11 : 1;                  // bit 11
@@ -642,7 +642,12 @@ struct {
   uint16_t      shd_warmup_brightness;     // F5C
   uint8_t       shd_warmup_time;           // F5E
 
-  uint8_t       free_f5e[72];              // F5E - Decrement if adding new Setting variables just above and below
+  uint8_t       free_f5f[21];              // F5F - Decrement if adding new Setting variables just above and below
+
+  char          hubitat_host[33];          // F74
+  uint16_t      hubitat_port;              // F95
+
+  uint8_t       free_f97[16];              // F97 - Decrement if adding new Setting variables just above and below
 
   // Only 32 bit boundary variables below
 
diff --git a/tasmota/settings.ino b/tasmota/settings.ino
index 85996047..c246ba76 100644
--- a/tasmota/settings.ino
+++ b/tasmota/settings.ino
@@ -810,6 +810,10 @@ void SettingsDefaultSet2(void)
   // Switch
   for (uint32_t i = 0; i < MAX_SWITCHES; i++) { Settings.switchmode[i] = SWITCH_MODE; }
 
+  // Hubitat
+  strlcpy(Settings.hubitat_host, HUBITAT_HOST, sizeof(Settings.hubitat_host));
+  Settings.hubitat_port = HUBITAT_PORT;
+
   // MQTT
   flag.mqtt_enabled |= MQTT_USE;
   flag.mqtt_response |= MQTT_RESULT_COMMAND;
diff --git a/tasmota/xdrv_01_webserver.ino b/tasmota/xdrv_01_webserver.ino
index 7e74f2e8..d81512ab 100644
--- a/tasmota/xdrv_01_webserver.ino
+++ b/tasmota/xdrv_01_webserver.ino
@@ -734,6 +734,8 @@ const char HTTP_FORM_OTHER[] PROGMEM =
   "<br>"
   "<label><input id='b1' type='checkbox'%s><b>" D_MQTT_ENABLE "</b></label><br>"
   "<br>"
+  "<label><input id='h1' type='checkbox'%s><b>" D_HUBITAT_ENABLE "</b></label><br>"
+  "<br>"
   "<label><b>" D_DEVICE_NAME "</b> (%s)</label><br><input id='dn' placeholder=\"\" value=\"%s\"><br>"
   "<br>";
 
@@ -2279,6 +2281,7 @@ void HandleOtherConfiguration(void)
   strlcpy(stemp, TasmotaGlobal.mqtt_data, sizeof(stemp));  // Get JSON template
   WSContentSend_P(HTTP_FORM_OTHER, stemp, (USER_MODULE == Settings.module) ? " checked disabled" : "",
     (Settings.flag.mqtt_enabled) ? " checked" : "",   // SetOption3 - Enable MQTT
+    (Settings.flag5.hubitat_enabled) ? " checked" : "",   // SetOption122 - Enable Hubitat
     SettingsText(SET_FRIENDLYNAME1), SettingsText(SET_DEVICENAME));
 
   uint32_t maxfn = (TasmotaGlobal.devices_present > MAX_FRIENDLYNAMES) ? MAX_FRIENDLYNAMES : (!TasmotaGlobal.devices_present) ? 1 : TasmotaGlobal.devices_present;
@@ -2334,6 +2337,7 @@ void OtherSaveSettings(void)
   WebGetArg("wp", tmp, sizeof(tmp));
   SettingsUpdateText(SET_WEBPWD, (!strlen(tmp)) ? "" : (strchr(tmp,'*')) ? SettingsText(SET_WEBPWD) : tmp);
   Settings.flag.mqtt_enabled = Webserver->hasArg("b1");  // SetOption3 - Enable MQTT
+  Settings.flag5.hubitat_enabled = Webserver->hasArg("h1");  // SetOption122 - Enable Hubitat
 #ifdef USE_EMULATION
   UdpDisconnect();
 #if defined(USE_EMULATION_WEMO) || defined(USE_EMULATION_HUE)
diff --git a/tasmota/xdrv_02_mqtt.ino b/tasmota/xdrv_02_mqtt.ino
index 0a2caf76..1cfb419a 100644
--- a/tasmota/xdrv_02_mqtt.ino
+++ b/tasmota/xdrv_02_mqtt.ino
@@ -320,6 +320,9 @@ void MqttPublish(const char* topic, bool retained)
   char slog_type[20];
   snprintf_P(slog_type, sizeof(slog_type), PSTR(D_LOG_RESULT));
 
+  // publish hook for Hubitat integration
+  HubitatPublish(TasmotaGlobal.mqtt_data);
+
   if (Settings.flag.mqtt_enabled) {  // SetOption3 - Enable MQTT
     if (MqttPublishLib(topic, retained)) {
       snprintf_P(slog_type, sizeof(slog_type), PSTR(D_LOG_MQTT));
diff --git a/tasmota/xdrv_88_hubitat.ino b/tasmota/xdrv_88_hubitat.ino
new file mode 100644
index 00000000..c535249f
--- /dev/null
+++ b/tasmota/xdrv_88_hubitat.ino
@@ -0,0 +1,187 @@
+/*
+  xdrv_88_hubitat.ino - Hubitat integration for Tasmota devices
+
+  Copyright (C) 2020  John Clark (inindev), Eric Maycock (erocm123)
+
+  Allows for the integration of Tasmota devices directly to the
+  Hubitat ElevationÂ® hub without the need for an MQTT broker.
+
+  This integration was originally conceived and produced by
+  Eric Maycock (erocm123): github.com/erocm123/Sonoff-Tasmota
+
+  The following is a derivative work that modernizes and simplifies
+  Eric's integration strategy to better fit my own needs.  UDP
+  auto-discovery has been removed, and the previous Hubitat drivers
+  and application for Sonoff have been reduced to a single driver:
+  github.com/inindev/hubitat/blob/main/drivers/tasmota_device.groovy
+
+  This program is free software: you can redistribute it and/or modify
+  it under the terms of the GNU General Public License as published by
+  the Free Software Foundation, either version 3 of the License, or
+  (at your option) any later version.
+
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#define XDRV_88               88
+
+#include <ESP8266HTTPClient.h>
+
+WiFiClient espClient;      // wifi client
+HTTPClient espHttpClient;  // http client
+
+const char kHubitatCommands[] PROGMEM = "|"  // no prefix
+  D_CMND_HUBITATHOST "|" D_CMND_HUBITATPORT;
+
+void (* const HubitatCommand[])(void) PROGMEM = {
+   &CmndHubitatHost, &CmndHubitatPort
+};
+
+/*********************************************************************************************/
+void HubitatInit(void)
+{
+  espHttpClient.begin(espClient, Settings.hubitat_host, Settings.hubitat_port);
+  espHttpClient.setUserAgent(String("Tasmota/") + TasmotaGlobal.version);
+}
+
+/*********************************************************************************************/
+bool HubitatPublish(const char* data)
+{
+  if (!Settings.flag5.hubitat_enabled) {
+    return false;
+  }
+
+  if (!data || data[0] != '{') { // dispatch json messages only
+    return false;
+  }
+
+  espHttpClient.addHeader("Content-Type", "application/json;charset=utf-8");
+  int32_t httpStatus = espHttpClient.POST(reinterpret_cast<const uint8_t*>(data), strlen(data));
+  if(httpStatus < 0) {
+    yield();
+    httpStatus = espHttpClient.POST(reinterpret_cast<const uint8_t*>(data), strlen(data));
+  }
+  if(httpStatus != 200) {
+    if(httpStatus < 0) {
+      AddLog_P(LOG_LEVEL_ERROR, PSTR(D_LOG_HUBITAT "http transport error - %s  host: %s:%d"), espHttpClient.errorToString(httpStatus).c_str(), Settings.hubitat_host, Settings.hubitat_port);
+    } else {
+      AddLog_P(LOG_LEVEL_ERROR, PSTR(D_LOG_HUBITAT "http status error: %d  host: %s:%d"), httpStatus, Settings.hubitat_host, Settings.hubitat_port);
+    }
+    return false;
+  }
+
+  return true;
+}
+
+/*********************************************************************************************\
+ * Presentation
+\*********************************************************************************************/
+
+#ifdef USE_WEBSERVER
+
+#define WEB_HANDLE_HUBITAT "he"
+
+const char HTTP_BTN_MENU_HUBITAT[] PROGMEM =
+  "<p><form action='" WEB_HANDLE_HUBITAT "' method='get'><button>" D_CONFIGURE_HUBITAT "</button></form></p>";
+
+const char HTTP_FORM_HUBITAT[] PROGMEM =
+  "<fieldset><legend><b>&nbsp;" D_HUBITAT_PARAMETERS "&nbsp;</b></legend>"
+  "<form method='get' action='" WEB_HANDLE_HUBITAT "'>"
+  "<p><b>" D_HOST "</b> (" HUBITAT_HOST ")<br><input id='hh' placeholder='" HUBITAT_HOST "' value='%s'></p>"
+  "<p><b>" D_PORT "</b> (" STR(HUBITAT_PORT) ")<br><input id='hp' placeholder='" STR(HUBITAT_PORT) "' value='%s'></p>";
+
+void HandleHubitatConfiguration(void)
+{
+  if (!HttpCheckPriviledgedAccess()) { return; }
+
+  AddLog_P(LOG_LEVEL_DEBUG, PSTR(D_LOG_HTTP D_CONFIGURE_HUBITAT));
+
+  if (Webserver->hasArg("save")) {
+    HubitatSaveSettings();
+    WebRestart(1);
+    return;
+  }
+
+  char hubitat_port_string[8] = "";
+  if(Settings.hubitat_port > 0) {
+    itoa(Settings.hubitat_port, hubitat_port_string, 10);
+  }
+
+  WSContentStart_P(PSTR(D_CONFIGURE_HUBITAT));
+  WSContentSendStyle();
+  WSContentSend_P(HTTP_FORM_HUBITAT,
+    Settings.hubitat_host,
+    hubitat_port_string);
+  WSContentSend_P(HTTP_FORM_END);
+  WSContentSpaceButton(BUTTON_CONFIGURATION);
+  WSContentStop();
+}
+
+void HubitatSaveSettings(void)
+{
+  char tmp[TOPSZ];
+  WebGetArg("hh", tmp, sizeof(tmp));
+  strlcpy(Settings.hubitat_host, (!strlen(tmp)) ? HUBITAT_HOST : (!strcmp(tmp,"0")) ? "" : tmp, sizeof(Settings.hubitat_host));
+  WebGetArg("hp", tmp, sizeof(tmp));
+  Settings.hubitat_port = (!strlen(tmp)) ? HUBITAT_PORT : atoi(tmp);
+  AddLog_P(LOG_LEVEL_INFO, PSTR(D_LOG_HUBITAT "Hubitat host %s, port %d"), Settings.hubitat_host, Settings.hubitat_port);
+}
+#endif  // USE_WEBSERVER
+
+/*********************************************************************************************\
+ * Commands
+\*********************************************************************************************/
+
+void CmndHubitatHost(void)
+{
+  if ((XdrvMailbox.data_len > 0) && (XdrvMailbox.data_len < sizeof(Settings.hubitat_host))) {
+    strlcpy(Settings.hubitat_host, (SC_CLEAR == Shortcut()) ? "" : (SC_DEFAULT == Shortcut()) ? HUBITAT_HOST : XdrvMailbox.data, sizeof(Settings.hubitat_host));
+    TasmotaGlobal.restart_flag = 2;
+  }
+  ResponseCmndChar(Settings.hubitat_host);
+}
+
+void CmndHubitatPort(void)
+{
+  if ((XdrvMailbox.payload > 0) && (XdrvMailbox.payload < 65536)) {
+    Settings.hubitat_port = (1 == XdrvMailbox.payload) ? HUBITAT_PORT : XdrvMailbox.payload;
+    TasmotaGlobal.restart_flag = 2;
+  }
+  ResponseCmndNumber(Settings.hubitat_port);
+}
+
+/*********************************************************************************************\
+ * Interface
+\*********************************************************************************************/
+
+bool Xdrv88(uint8_t function)
+{
+  if (!Settings.flag5.hubitat_enabled) return false;
+
+  bool result = false;
+  switch (function) {
+    case FUNC_PRE_INIT:
+      HubitatInit();
+      break;
+    case FUNC_LOOP:
+      break;
+#ifdef USE_WEBSERVER
+    case FUNC_WEB_ADD_BUTTON:
+      WSContentSend_P(HTTP_BTN_MENU_HUBITAT);
+      break;
+    case FUNC_WEB_ADD_HANDLER:
+      WebServer_on(PSTR("/" WEB_HANDLE_HUBITAT), HandleHubitatConfiguration);
+      break;
+#endif  // USE_WEBSERVER
+    case FUNC_COMMAND:
+      result = DecodeCommand(kHubitatCommands, HubitatCommand);
+      break;
+  }
+  return result;
+}
-- 
2.29.2

